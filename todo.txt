-- Problem formulation
min c^t*x s.t. Ax=b, x>=0
^ can default to Ax<=b and add slack variables
dimensions of A: m, n

--- Revised Simplex Algorithm steps:
0) [later] Find feasible point
-> initial vertex x and basis subset of [m]
-- Iterate:
KKT conditions:
- Ax = b
- A^t*l + s = c (KKT) - l from Ax=b, s from x>=0
- x >= 0
- s >= 0
- x^t*s = 0 - complementary slackness
-> decomposition of x, s, c into x_B, x_N etc.
-> x_N = 0, s_B = 0, A_B defines x
-> store B,N as subsets of [n]
-> divide the original matrices and perform computations on copies
- [later] improve efficiency
1) l = A_B^(-t)*c_B
2) s_N = c_N - A_N^t*l
- if s_N >= 0 -> optimal (KKT sufficient)
3) Pivot: pick index q_i where *s_N < 0* swap a column of A_N with a column of A_B - (?) just pick any? - prolly good to keep N as a queue
- changes B and N by one entry
- goes to a new vertex with a *smaller objective value*
- (?) keep track of what Bases were used - no cycles? How to ensure a basis is non-degenerate (A_B full rank)?
-> chosen column A_q of A_N -> Dx_B = A_B^(-1)A_q*x_q
4) Let d = A_B^(-1)A_q
- If d <= 0 -> problem unbounded. Otherwise consider i : d_i > 0
5) Select p = argmin i {x_i / d_i} - where d_i > 0 and i from B (to be swapped away)
6) Update new x_B = old x_B + Dx_B, swap index p with q in N and B
7) Repeat

--- TODO:
Migrate functionalites to LinAlg : matrix operations ; solving SLE's
LinAlg testing with Catch2
LinAlg incorporation into Simplex

1) Generalize problem: various constraints/variables to be added
- Not only Ax<=b, but also Ax=b, x not necessarily >=0
- Translate to the standard form, x any <=> x=x+ - x-, x+, x- >=0
- Ax=b doesn't need slack -> can cause troubles
2) Add initial problem: >> min s << s.t. [A|I]*[x|s]^t = b, x,s >= 0 -> if s=0, then feasible, starting point x=0, s=b for the above ? when b negative ? -> multiply them rows with (-1)
- distinguish between slack and real variables before computing initial -> only later add slack accordingly
3) Update step: if ShermanMorrison fails choose a different i_N until successful - if not successful, then idk, something is BAD
4) Do some refactoring
- improve performance
5) Update todo and move to readme
